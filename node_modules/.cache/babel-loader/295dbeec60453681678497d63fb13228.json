{"ast":null,"code":"import _slicedToArray from \"/Volumes/My Files/Block chain/udemy course/projects/excercise1/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Volumes/My Files/Block chain/udemy course/projects/excercise1/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Volumes/My Files/Block chain/udemy course/projects/excercise1/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/My Files/Block chain/udemy course/projects/excercise1/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\n\nvar App = function App() {\n  useEffect(function () {\n    loadWeb3();\n    updateBlockchainData();\n    loadBlockchainData();\n  }, []);\n\n  var loadWeb3 = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert(\"No ethereum browser detected! You can check out MetaMask!\");\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadWeb3() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var loadBlockchainData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var web3, account, networkId, tetherData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              web3 = window.web3;\n              _context2.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              account = _context2.sent;\n              setAccount(account[0]);\n              _context2.next = 7;\n              return web3.eth.net.getId();\n\n            case 7:\n              networkId = _context2.sent;\n              tetherData = Tether.networks[networkId];\n              console.log(tetherData); // if(tetherData){\n              //     const tether = new web3.eth.Contract(Tether.abi,tetherData.address);\n              //     setTether({tether});\n              //     let tetherBalance = await tether.methods.balanceOf(account).call();\n              //     setTetherBalance(tetherBalance.toString());\n              //     console.log(tetherBalance);\n              // }else{\n              //     window.alert(\"Error! Tether Contract not deployed - No network detected!\");\n              // }\n              // console.log(network);\n              // console.log(account);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function loadBlockchainData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var updateBlockchainData = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var web3;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              web3 = window.web3; // window.addEventListener(\"load\",async function(){\n              //     let account = await web3.eth.getAccounts();\n              //     console.log(account);\n              // })\n\n              window.ethereum.on(\"accountsChanged\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                var account;\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.next = 2;\n                        return web3.eth.getAccounts();\n\n                      case 2:\n                        account = _context3.sent;\n\n                      case 3:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              })));\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function updateBlockchainData() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var _useState = useState(\"0x0454656\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tether = _useState4[0],\n      setTether = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      rwd = _useState6[0],\n      setRwd = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      decentralBank = _useState8[0],\n      setDecentralBank = _useState8[1];\n\n  var _useState9 = useState(\"0\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      tetherBalance = _useState10[0],\n      setTetherBalance = _useState10[1];\n\n  var _useState11 = useState(\"0\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      rwdBalance = _useState12[0],\n      setRwdBalance = _useState12[1];\n\n  var _useState13 = useState(\"0\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      stakingBalance = _useState14[0],\n      setStakingBalance = _useState14[1];\n\n  var _useState15 = useState(true),\n      _useState16 = _slicedToArray(_useState15, 2),\n      loading = _useState16[0],\n      setLoading = _useState16[1];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    account: account,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Volumes/My Files/Block chain/udemy course/projects/excercise1/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","useEffect","useState","Navbar","Web3","Tether","App","loadWeb3","updateBlockchainData","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setAccount","net","getId","networkId","tetherData","networks","console","log","on","tether","setTether","rwd","setRwd","decentralBank","setDecentralBank","tetherBalance","setTetherBalance","rwdBalance","setRwdBalance","stakingBalance","setStakingBalance","loading","setLoading"],"mappings":"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","sourcesContent":["import React, { useEffect,useState } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\n\nconst App = () => {\n\n    useEffect(() => {\n        loadWeb3();\n\n        updateBlockchainData();\n        loadBlockchainData();\n    }, [])\n\n    const loadWeb3 = async()=>{\n        if(window.ethereum){\n            window.web3 = new Web3(window.ethereum);\n            await window.ethereum.enable();\n        }else if(window.web3){\n            window.web3 = new Web3(window.web3.currentProvider);\n        }else{\n            window.alert(\"No ethereum browser detected! You can check out MetaMask!\");\n        }\n    }\n\n    const loadBlockchainData=async()=>{\n        const web3 = window.web3;\n        const account = await web3.eth.getAccounts();\n        setAccount(account[0]);\n        const networkId = await web3.eth.net.getId();\n        const tetherData = Tether.networks[networkId];\n        console.log(tetherData);\n        // if(tetherData){\n        //     const tether = new web3.eth.Contract(Tether.abi,tetherData.address);\n        //     setTether({tether});\n        //     let tetherBalance = await tether.methods.balanceOf(account).call();\n        //     setTetherBalance(tetherBalance.toString());\n        //     console.log(tetherBalance);\n        // }else{\n        //     window.alert(\"Error! Tether Contract not deployed - No network detected!\");\n        // }\n        // console.log(network);\n        // console.log(account);\n    }\n\n    const updateBlockchainData = async()=>{\n        const web3 = window.web3;\n        // window.addEventListener(\"load\",async function(){\n        //     let account = await web3.eth.getAccounts();\n        //     console.log(account);\n        // })\n        window.ethereum.on(\"accountsChanged\",async function(){\n            let account = await web3.eth.getAccounts();\n            // console.log(account);\n        })\n    }\n\n    const [account,setAccount] = useState(\"0x0454656\");\n    const [tether,setTether] = useState({});\n    const [rwd,setRwd] = useState({});\n    const [decentralBank,setDecentralBank] = useState({});\n    const [tetherBalance,setTetherBalance] = useState(\"0\");\n    const [rwdBalance,setRwdBalance] = useState(\"0\");\n    const [stakingBalance,setStakingBalance] = useState(\"0\");\n    const [loading,setLoading] = useState(true); \n\n\n    return (\n        <div>\n            <Navbar account={account} />\n        </div>\n    )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}